3.13
render 안에서는 this.setState사용 절대 안된다 

props를 바꾸고 싶을 때는 자식 컴포넌트에서 state로 바꾼다음 그 state를 변경한다.
함수를 써주면 좀 더 세밀한 기능 구현이 가능하다(constructor / ref / setState )

jsx 에서 조건문은 삼항 연산자(또는 부호 연산자) 활용


4.3 성능체크와 QnA

- 리셋 버튼 누를때마다 screen 도 렌더링이 되는데, 역시나 불필요한 렌더링이 되는 중
-> 해결 : 스크린과 result 를 다른 컴포넌트로 분리하고 pure 또는 memo 로 작성

-> 부모 Component 자식 pureComponent 로 작성하였을 때는 잘 작동하나, memo로 작성하니 잘 되지 않는다.. 이유가 무엇일까
-> 부모 Hooks 자식 pureComponent 는 또 먹히지 않는다



Q. 숫자야구에서 getNumbers가 input 값이 바뀔때마다 계속 호출된다
A. hooks에서는 state를 바꿀 때 훅스 함수 전체가 다시 실행되기 때문에 그 안에 있는 getNumbers 가 다시 호출되는 것임(나중에 어떻게 해결하는지 배움)

4.4 반응속도체크 hooks 로 전환하기
- hooks 에서는 DOM 에 접근하기 위한 용도로 ref 를 사용하는 기능 뿐만 아니라 추가로
class에서의 this속성들(콕 집어서 화면에는 영향을 미치지 않지만 값이 바뀌는 것들)을 ref 로 표현하기 위한 용도로도 사용가능함. 

- ref 는 current 로 접근해야함

Q.state 랑 ref 의 차이는?
A.state 값은 변경되면 다시 렌더링되지만 ref 는 값이 변경되어도 렌더링이 되지 않음.


- 리액트에서는 배열안에 JSX 구문을 담아서 return 하는 것도 가능

5.3 가위바위보 게임 만들기
- 클로저 이슈 const { imgCoords } = this.state 를 비동기 함수 안에 넣었어야 했는데, 밖에서 선언함으로써 참조하는 값이 바뀌지 않는 문제 발생했음

5-4. 고차함수와 QnA
- Error: Maximum update depth exceeded 문제 발생.
https://kss7547.tistory.com/36
onClick 안에 화살표 함수를 넣어 해결할 수 있지만, 이렇게 되면 렌더링될때마다 새로운 함수가 생기게됨 -> 메모리문제 발생
-> 고차함수 패턴 사용

5-5. Hooks 와 useEffect
- hooks 에서는 라이프사이클 어떻게 처리하나
-> useEffect 로 비슷하게 사용가능
-> 두 번째 인수 배열에 넣은 값(예제에서는 imgCoord) 들이 바뀔 때 useEffect 가 실행됨.
-> 그래서 예제에서는 계속 useEffect 가 실행되고 종료되고를 반복한다
-> 배열을 안넣은 상태는 componentDidMount 와 유사한 기능, 배열에 변수를 추가했을 때는 componentDidUpdate 와 유사한 기능을 수행한다.
-> useEffect 를 state 마다 따로 두어 기능을 수행할 수도 있다.( class 의 경우에는 componentDidMount 나 componentDidUpdate 에서 모든 state를 조건문으로 분기처리하여야함)

5.6 클래스와 Hooks 라이프사이클 비교
